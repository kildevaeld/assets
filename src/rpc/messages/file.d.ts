// generated by Proto2Typescript. do not touch!

declare module messages {
	interface ProtoBufModel {
		toArrayBuffer(): ArrayBuffer;
		//toBuffer(): NodeBuffer;
		//encode(): ByteBuffer;
		toBase64(): string;
		toString(): string;
	}

	export interface ProtoBufBuilder {
		ListRequest: ListRequestBuilder;
		CreateRequest: CreateRequestBuilder;
		CreateRequestResponse: CreateRequestResponseBuilder;
		CreateResponse: CreateResponseBuilder;
		GetRequest: GetRequestBuilder;
		FileInfo: FileInfoBuilder;
		FileChunk: FileChunkBuilder;
		
	}
}

declare module messages {

	export interface ListRequest extends ProtoBufModel {
		offset?: number;
		getOffset() : number;
		setOffset(offset : number): void;
		limit?: number;
		getLimit() : number;
		setLimit(limit : number): void;
		
	}
	
	export interface ListRequestBuilder {
		new(): ListRequest;
		decode(buffer: ArrayBuffer) : ListRequest;
		//decode(buffer: NodeBuffer) : ListRequest;
		//decode(buffer: ByteArrayBuffer) : ListRequest;
		decode64(buffer: string) : ListRequest;
		
	}	
}

declare module messages {

	export interface CreateRequest extends ProtoBufModel {
		path?: string;
		getPath() : string;
		setPath(path : string): void;
		
	}
	
	export interface CreateRequestBuilder {
		new(): CreateRequest;
		decode(buffer: ArrayBuffer) : CreateRequest;
		//decode(buffer: NodeBuffer) : CreateRequest;
		//decode(buffer: ByteArrayBuffer) : CreateRequest;
		decode64(buffer: string) : CreateRequest;
		
	}	
}

declare module messages {

	export interface CreateRequestResponse extends ProtoBufModel {
		requestID?: string;
		getRequestID() : string;
		setRequestID(requestID : string): void;
		expire?: number;
		getExpire() : number;
		setExpire(expire : number): void;
		path?: string;
		getPath() : string;
		setPath(path : string): void;
		
	}
	
	export interface CreateRequestResponseBuilder {
		new(): CreateRequestResponse;
		decode(buffer: ArrayBuffer) : CreateRequestResponse;
		//decode(buffer: NodeBuffer) : CreateRequestResponse;
		//decode(buffer: ByteArrayBuffer) : CreateRequestResponse;
		decode64(buffer: string) : CreateRequestResponse;
		
	}	
}

declare module messages {

	export interface CreateResponse extends ProtoBufModel {
		
	}
	
	export interface CreateResponseBuilder {
		new(): CreateResponse;
		decode(buffer: ArrayBuffer) : CreateResponse;
		//decode(buffer: NodeBuffer) : CreateResponse;
		//decode(buffer: ByteArrayBuffer) : CreateResponse;
		decode64(buffer: string) : CreateResponse;
		
	}	
}

declare module messages {

	export interface GetRequest extends ProtoBufModel {
		
	}
	
	export interface GetRequestBuilder {
		new(): GetRequest;
		decode(buffer: ArrayBuffer) : GetRequest;
		//decode(buffer: NodeBuffer) : GetRequest;
		//decode(buffer: ByteArrayBuffer) : GetRequest;
		decode64(buffer: string) : GetRequest;
		
	}	
}

declare module messages {

	export interface FileInfo extends ProtoBufModel {
		id?: string;
		getId() : string;
		setId(id : string): void;
		name?: string;
		getName() : string;
		setName(name : string): void;
		filename?: string;
		getFilename() : string;
		setFilename(filename : string): void;
		path?: string;
		getPath() : string;
		setPath(path : string): void;
		mime?: string;
		getMime() : string;
		setMime(mime : string): void;
		size?: number;
		getSize() : number;
		setSize(size : number): void;
		
	}
	
	export interface FileInfoBuilder {
		new(): FileInfo;
		decode(buffer: ArrayBuffer) : FileInfo;
		//decode(buffer: NodeBuffer) : FileInfo;
		//decode(buffer: ByteArrayBuffer) : FileInfo;
		decode64(buffer: string) : FileInfo;
		
	}	
}

declare module messages {

	export interface FileChunk extends ProtoBufModel {
		total?: number;
		getTotal() : number;
		setTotal(total : number): void;
		progress?: number;
		getProgress() : number;
		setProgress(progress : number): void;
		data?: ByteBuffer;
		getData() : ByteBuffer;
		setData(data : ByteBuffer): void;
		
	}
	
	export interface FileChunkBuilder {
		new(): FileChunk;
		decode(buffer: ArrayBuffer) : FileChunk;
		//decode(buffer: NodeBuffer) : FileChunk;
		//decode(buffer: ByteArrayBuffer) : FileChunk;
		decode64(buffer: string) : FileChunk;
		
	}	
}
