"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var Koa = require('koa');
var Router = require('koa-router');
var Path = require('path');
var URL = require('url');
var convert = require('koa-convert'),
    cors = require('koa-cors'),
    body = require('koa-body');
function toBoolean(str) {
    return !! ~['true', 'TRUE', 't', 'y', 'j', 'yes'].indexOf(str);
}
function App(client) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var app = new Koa();
    var router = new Router();
    var p = options.prefix || '/';
    router.post(p, convert(body({ multipart: true })), createAsset);
    router.get(p, listAssets);
    router.get(Path.join(p, '*'), getAsset);
    router.del(Path.join(p, '*'), deleteAsset);
    app.use(convert(cors({
        origin: '*',
        expose: ['Link']
    })));
    app.use(router.routes());
    //app.use(router.allowedMethods())
    //router.put('/')
    return app;
    function listAssets(ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            ctx.type = 'json';
            var query = ctx.query;
            if (query.id) {
                var asset = yield client.getById(query.id);
                if (!asset) {
                    ctx.throw(404, { message: 'not found' });
                }
                ctx.body = asset;
            }
            var page = 1,
                limit = 100;
            if (query.page) {
                var i = parseInt(query.page);
                if (!isNaN(i)) page = i;
            }
            if (query.limit) {
                var _i = parseInt(query.limit);
                if (!isNaN(_i)) limit = _i;
            }
            if (page <= 0) page = 1;
            var result = void 0;
            if (query.q) {
                result = yield client.query(query.q);
            } else {
                var count = yield client.metaStore.count();
                var pages = Math.ceil(count / limit);
                var offset = limit * (page - 1);
                if (offset > count) {
                    result = [];
                } else {
                    result = yield client.list({
                        offset: offset,
                        limit: limit
                    });
                }
                var links = {
                    first: 1,
                    last: pages
                };
                if (page > 1) links.prev = page - 1;
                if (page < pages) links.next = page + 1;
                _writeLinksHeader(ctx, links);
            }
            ctx.body = result;
        });
    }
    function getAsset(ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            var query = ctx.query;
            var path = ctx.path;
            if (path[0] !== '/') path = "/" + path;
            var asset = yield client.getByPath(path);
            console.log(asset);
            if (!asset) ctx.throw(404);
            if (toBoolean(query.meta)) {
                ctx.body = asset;
                return;
            }
            ctx.type = asset.mime;
            //res.setHeader('Content-Type', asset.mime);
            //res.setHeader('Content-Length', asset.size + "");
            if (toBoolean(query.download)) {
                ctx.set('Content-Disposition', 'attachment; filename=' + asset.filename);
            }
            var outStream = void 0;
            if (toBoolean(query.thumbnail)) {
                ctx.set('Content-Type', 'image/png');
                outStream = yield client.thumbnail(asset);
                console.log(outStream);
                if (outStream == null) {
                    ctx.throw(400, {
                        message: 'Cannot generate thumbnail for mimetype: ' + asset.mime
                    });
                }
            } else {
                outStream = yield client.stream(asset);
            }
            ctx.status = 200;
            ctx.body = outStream;
        });
    }
    function createAsset(ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            /*let contentType = ctx.get('content-type')
            if (!contentType || contentType.indexOf('multipart/form-data') == -1) {
                //throw new Error('not multiform');
                let query = ctx.query
                     if (query.filename) {
                         let len = parseInt(ctx.get('content-length')),
                        type : string = contentType;
                        
                         let path = query.path||'/'
                    if (path[path.length - 1] != '/') path += '/';
                    let asset = await this._assets.create(req, path + query.filename, {
                        mime: type,
                        size: len,
                        skipMeta: false
                    });
                         ctx.type = 'json';
                    ctx.body = asset;
                     }
                throw new Error('not multiform');
            }
                 let {files, fields} = await this._readForm(req);
                 let file: formidable.File;
            for (let k in files) {
                file = files[k];
                break;
            }
                 if (!file) throw new Error('not file');
                      let path = fields['path']|| '/',
                dest = Path.join(path, file.name),
                opts: AssetCreateOptions = {skipMeta:false};
                 if (fields['name'] && fields['name'] != "") {
                opts.name = fields['name'];
            }
                 if (fields['mime'] && fields['mime'] != "") {
                opts.mime = fields['mime'];
            }
            debug('create file "%s", options "%j"', dest, opts);
            let asset = await this._assets.createFromPath(file.path, dest, opts);
                 await this._writeJSON(res, asset, 201);*/
            var contentType = ctx.req.headers['content-type'];
            if (!contentType || contentType.indexOf('multipart/form-data') == -1) {
                //throw new Error('not multiform');
                var query = ctx.query;
                if (query.filename) {
                    var len = parseInt(ctx.get('content-length')),
                        type = contentType;
                    var _path = query.path || '/';
                    if (_path[_path.length - 1] != '/') _path += '/';
                    var _asset = yield client.create(ctx.req, _path + query.filename, {
                        mime: type,
                        size: len,
                        skipMeta: false
                    });
                    ctx.type = 'json';
                    ctx.body = _asset;
                    return;
                }
                ctx.throw(400, 'No name spcified');
            }
            ctx.type = "json";
            var body = ctx.request.body;
            var file = body.files.file;
            if (file == null) {
                ctx.throw(403);
            }
            var fields = body.fields;
            var path = body.fields.path || '/',
                dest = Path.join(path, file.name),
                opts = { skipMeta: false };
            if (fields.name && fields.name != "") {
                opts.name = fields.name;
            }
            if (fields.mime && fields.mime != "") {
                opts.mime = fields.mime;
            }
            var asset = yield client.createFromPath(file.path, dest, opts);
            ctx.status = 201;
            ctx.body = asset;
        });
    }
    function updateAsset(ctx) {}
    function deleteAsset(ctx) {}
    function _writeLinksHeader(ctx, links) {
        var url = ctx.url;
        url = ctx.get('host') + url; // +  (url.indexOf('?') == -1 ? "?" : "&") + 'page=';
        url = "http://" + url;
        var u = URL.parse(url, true);
        if (u.query) {
            /*let query = Qs.parse(u.query);*/
            if (u.query.page) {
                delete u.query.page;
            }
            //u.query = Qs.stringify(query);
            u.search = null;
            url = URL.format(u);
            url += "&page=";
        } else {
            url += '?page=';
        }
        ctx.set('Link', Object.keys(links).map(function (rel) {
            return '<' + url + links[rel] + '>; rel="' + rel + '"';
        }).join(', '));
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,
