"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator.throw(value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
var asset_1 = require('../asset');
var utils_1 = require('../utils');
var fs = require('fs');
var Path = require('path');
var gm = require('gm'),
    exec = require('mz/child_process');
function createThumnail(stream) {
    var maxWidth = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];
    var maxHeight = arguments.length <= 2 || arguments[2] === undefined ? 100 : arguments[2];

    return __awaiter(this, void 0, Promise, function* () {
        var tmp = yield utils_1.tmpFile("image.png");
        var rs = gm(stream).resize(maxWidth, maxHeight).stream();
        yield utils_1.writeStream(rs, tmp);
        var stats = yield utils_1.getFileStats(tmp);
        rs = fs.createReadStream(tmp);
        rs.once('end', function () {
            fs.unlink(tmp);
        });
        var info = new asset_1.Asset({
            filename: Path.basename(tmp),
            path: Path.dirname(tmp),
            mime: 'image/png',
            size: stats.size
        });
        return { info: info, stream: rs };
    });
}
function ImageTypeGeneraror(stream) {
    return __awaiter(this, void 0, Promise, function* () {
        return yield createThumnail(stream);
    });
}
exports.ImageTypeGeneraror = ImageTypeGeneraror;
function VideoTypeGeneraror(stream) {
    return __awaiter(this, void 0, Promise, function* () {
        return null;
    });
}
exports.VideoTypeGeneraror = VideoTypeGeneraror;
function PdfTypeGeneraror(stream) {
    return __awaiter(this, void 0, Promise, function* () {
        return null;
    });
}
exports.PdfTypeGeneraror = PdfTypeGeneraror;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdlbmVyYXRvcnMvZ2VuZXJhdG9ycy5qcyIsImdlbmVyYXRvcnMvZ2VuZXJhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJLFlBQVksU0FBQyxJQUFRLFVBQUssU0FBTCxJQUFtQixVQUFVLE9BQVYsRUFBbUIsVUFBbkIsRUFBK0IsQ0FBL0IsRUFBa0MsU0FBbEMsRUFBNkM7QUFDckYsV0FBTyxLQUFLLE1BQU0sSUFBSSxPQUFKLENBQU4sQ0FBTCxDQUF5QixVQUFVLE9BQVYsRUFBbUIsTUFBbkIsRUFBMkI7QUFDdkQsaUJBQVMsU0FBVCxDQUFtQixLQUFuQixFQUEwQjtBQUFFLGdCQUFJO0FBQUUscUJBQUssVUFBVSxJQUFWLENBQWUsS0FBZixDQUFMLEVBQUY7YUFBSixDQUFxQyxPQUFPLENBQVAsRUFBVTtBQUFFLHVCQUFPLENBQVAsRUFBRjthQUFWO1NBQWpFO0FBQ0EsaUJBQVMsUUFBVCxDQUFrQixLQUFsQixFQUF5QjtBQUFFLGdCQUFJO0FBQUUscUJBQUssVUFBVSxLQUFWLENBQWdCLEtBQWhCLENBQUwsRUFBRjthQUFKLENBQXNDLE9BQU8sQ0FBUCxFQUFVO0FBQUUsdUJBQU8sQ0FBUCxFQUFGO2FBQVY7U0FBakU7QUFDQSxpQkFBUyxJQUFULENBQWMsTUFBZCxFQUFzQjtBQUFFLG1CQUFPLElBQVAsR0FBYyxRQUFRLE9BQU8sS0FBUCxDQUF0QixHQUFzQyxJQUFJLENBQUosQ0FBTSxVQUFVLE9BQVYsRUFBbUI7QUFBRSx3QkFBUSxPQUFPLEtBQVAsQ0FBUixDQUFGO2FBQW5CLENBQU4sQ0FBcUQsSUFBckQsQ0FBMEQsU0FBMUQsRUFBcUUsUUFBckUsQ0FBdEMsQ0FBRjtTQUF0QjtBQUNBLGFBQUssQ0FBQyxZQUFZLFVBQVUsS0FBVixDQUFnQixPQUFoQixFQUF5QixVQUF6QixDQUFaLENBQUQsQ0FBbUQsSUFBbkQsRUFBTCxFQUp1RDtLQUEzQixDQUFoQyxDQURxRjtDQUE3QztBQ0E1QyxJQUFBLFVBQUEsUUFBb0IsVUFBcEIsQ0FBQTtBQUdBLElBQUEsVUFBQSxRQUFpRCxVQUFqRCxDQUFBO0FBRUEsSUFBWSxLQUFFLFFBQU0sSUFBTixDQUFGO0FBQ1osSUFBWSxPQUFJLFFBQU0sTUFBTixDQUFKO0FBRVosSUFBTSxLQUFLLFFBQVEsSUFBUixDQUFMO0lBQ0YsT0FBTyxRQUFRLGtCQUFSLENBQVA7QUFFSixTQUFBLGNBQUEsQ0FBOEIsTUFBOUIsRUFBNEY7UUFBN0MsaUVBQWtCLG1CQUEyQjtRQUF0QixrRUFBbUIsbUJBQUc7O0FER3hGLFdBQU8sVUFBVSxJQUFWLEVBQWdCLEtBQUssQ0FBTCxFQUFRLE9BQXhCLEVBQWlDLGFBQWE7QUNEckQsWUFBSSxNQUFNLE1BQU0sUUFBQSxPQUFBLENBQVEsV0FBUixDQUFOLENEQzJDO0FDQ3JELFlBQUksS0FBSyxHQUFHLE1BQUgsRUFBVyxNQUFYLENBQWtCLFFBQWxCLEVBQTRCLFNBQTVCLEVBQXVDLE1BQXZDLEVBQUwsQ0REaUQ7QUNFckQsY0FBTSxRQUFBLFdBQUEsQ0FBWSxFQUFaLEVBQWdCLEdBQWhCLENBQU4sQ0RGcUQ7QUNJckQsWUFBSSxRQUFRLE1BQU0sUUFBQSxZQUFBLENBQWEsR0FBYixDQUFOLENESnlDO0FDTXJELGFBQUssR0FBRyxnQkFBSCxDQUFvQixHQUFwQixDQUFMLENETnFEO0FDT3JELFdBQUcsSUFBSCxDQUFRLEtBQVIsRUFBZSxZQUFBO0FBQ1gsZUFBRyxNQUFILENBQVUsR0FBVixFQURXO1NBQUEsQ0FBZixDRFBxRDtBQ1dyRCxZQUFJLE9BQWMsSUFBSSxRQUFBLEtBQUEsQ0FBTTtBQUN4QixzQkFBVSxLQUFLLFFBQUwsQ0FBYyxHQUFkLENBQVY7QUFDQSxrQkFBTSxLQUFLLE9BQUwsQ0FBYSxHQUFiLENBQU47QUFDQSxrQkFBTSxXQUFOO0FBQ0Esa0JBQU0sTUFBTSxJQUFOO1NBSlEsQ0FBZCxDRFhpRDtBQ2tCckQsZUFBTyxFQUFDLE1BQUssSUFBTCxFQUFVLFFBQU8sRUFBUCxFQUFsQixDRGxCcUQ7S0FBYixDQUF4QyxDQ0h3RjtDQUE1RjtBQXdCQSxTQUFBLGtCQUFBLENBQTBDLE1BQTFDLEVBQXlEO0FERnJELFdBQU8sVUFBVSxJQUFWLEVBQWdCLEtBQUssQ0FBTCxFQUFRLE9BQXhCLEVBQWlDLGFBQWE7QUNHckQsZUFBTyxNQUFNLGVBQWUsTUFBZixDQUFOLENESDhDO0tBQWIsQ0FBeEMsQ0NFcUQ7Q0FBekQ7QUFBc0IsUUFBQSxrQkFBQSxHQUFrQixrQkFBbEI7QUFJdEIsU0FBQSxrQkFBQSxDQUEwQyxNQUExQyxFQUF5RDtBREFyRCxXQUFPLFVBQVUsSUFBVixFQUFnQixLQUFLLENBQUwsRUFBUSxPQUF4QixFQUFpQyxhQUFhO0FDQ3JELGVBQU8sSUFBUCxDRERxRDtLQUFiLENBQXhDLENDQXFEO0NBQXpEO0FBQXNCLFFBQUEsa0JBQUEsR0FBa0Isa0JBQWxCO0FBSXRCLFNBQUEsZ0JBQUEsQ0FBd0MsTUFBeEMsRUFBdUQ7QURFbkQsV0FBTyxVQUFVLElBQVYsRUFBZ0IsS0FBSyxDQUFMLEVBQVEsT0FBeEIsRUFBaUMsYUFBYTtBQ0RyRCxlQUFPLElBQVAsQ0RDcUQ7S0FBYixDQUF4QyxDQ0ZtRDtDQUF2RDtBQUFzQixRQUFBLGdCQUFBLEdBQWdCLGdCQUFoQiIsImZpbGUiOiJnZW5lcmF0b3JzL2dlbmVyYXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMpKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmNvbnN0IGFzc2V0XzEgPSByZXF1aXJlKCcuLi9hc3NldCcpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBQYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZ20gPSByZXF1aXJlKCdnbScpLCBleGVjID0gcmVxdWlyZSgnbXovY2hpbGRfcHJvY2VzcycpO1xuZnVuY3Rpb24gY3JlYXRlVGh1bW5haWwoc3RyZWFtLCBtYXhXaWR0aCA9IDEwMCwgbWF4SGVpZ2h0ID0gMTAwKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCB0bXAgPSB5aWVsZCB1dGlsc18xLnRtcEZpbGUoXCJpbWFnZS5wbmdcIik7XG4gICAgICAgIGxldCBycyA9IGdtKHN0cmVhbSkucmVzaXplKG1heFdpZHRoLCBtYXhIZWlnaHQpLnN0cmVhbSgpO1xuICAgICAgICB5aWVsZCB1dGlsc18xLndyaXRlU3RyZWFtKHJzLCB0bXApO1xuICAgICAgICBsZXQgc3RhdHMgPSB5aWVsZCB1dGlsc18xLmdldEZpbGVTdGF0cyh0bXApO1xuICAgICAgICBycyA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0odG1wKTtcbiAgICAgICAgcnMub25jZSgnZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgZnMudW5saW5rKHRtcCk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgaW5mbyA9IG5ldyBhc3NldF8xLkFzc2V0KHtcbiAgICAgICAgICAgIGZpbGVuYW1lOiBQYXRoLmJhc2VuYW1lKHRtcCksXG4gICAgICAgICAgICBwYXRoOiBQYXRoLmRpcm5hbWUodG1wKSxcbiAgICAgICAgICAgIG1pbWU6ICdpbWFnZS9wbmcnLFxuICAgICAgICAgICAgc2l6ZTogc3RhdHMuc2l6ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IGluZm86IGluZm8sIHN0cmVhbTogcnMgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIEltYWdlVHlwZUdlbmVyYXJvcihzdHJlYW0pIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIHlpZWxkIGNyZWF0ZVRodW1uYWlsKHN0cmVhbSk7XG4gICAgfSk7XG59XG5leHBvcnRzLkltYWdlVHlwZUdlbmVyYXJvciA9IEltYWdlVHlwZUdlbmVyYXJvcjtcbmZ1bmN0aW9uIFZpZGVvVHlwZUdlbmVyYXJvcihzdHJlYW0pIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG59XG5leHBvcnRzLlZpZGVvVHlwZUdlbmVyYXJvciA9IFZpZGVvVHlwZUdlbmVyYXJvcjtcbmZ1bmN0aW9uIFBkZlR5cGVHZW5lcmFyb3Ioc3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xufVxuZXhwb3J0cy5QZGZUeXBlR2VuZXJhcm9yID0gUGRmVHlwZUdlbmVyYXJvcjtcbiIsImltcG9ydCB7UmVhZGFibGV9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQge0Fzc2V0fSBmcm9tICcuLi9hc3NldCc7XG5pbXBvcnQge0lGaWxlfSBmcm9tICcuLi9pbnRlcmZhY2UnO1xuXG5pbXBvcnQge3RtcEZpbGUsIHdyaXRlU3RyZWFtLCBnZXRGaWxlU3RhdHN9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgUGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgZ20gPSByZXF1aXJlKCdnbScpLFxuICAgIGV4ZWMgPSByZXF1aXJlKCdtei9jaGlsZF9wcm9jZXNzJylcbiAgICBcbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRodW1uYWlsKHN0cmVhbTpSZWFkYWJsZSwgbWF4V2lkdGg6bnVtYmVyID0gMTAwLCBtYXhIZWlnaHQ6bnVtYmVyID0gMTAwKTogUHJvbWlzZTx7aW5mbzpJRmlsZSwgc3RyZWFtOlJlYWRhYmxlfT4ge1xuICAgIFxuICAgIGxldCB0bXAgPSBhd2FpdCB0bXBGaWxlKFwiaW1hZ2UucG5nXCIpO1xuICAgIFxuICAgIGxldCBycyA9IGdtKHN0cmVhbSkucmVzaXplKG1heFdpZHRoLCBtYXhIZWlnaHQpLnN0cmVhbSgpO1xuICAgIGF3YWl0IHdyaXRlU3RyZWFtKHJzLCB0bXApO1xuICAgIFxuICAgIGxldCBzdGF0cyA9IGF3YWl0IGdldEZpbGVTdGF0cyh0bXApO1xuICAgIFxuICAgIHJzID0gZnMuY3JlYXRlUmVhZFN0cmVhbSh0bXApO1xuICAgIHJzLm9uY2UoJ2VuZCcsICgpID0+IHtcbiAgICAgICAgZnMudW5saW5rKHRtcCk7XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGluZm86IElGaWxlID0gbmV3IEFzc2V0KHtcbiAgICAgICAgZmlsZW5hbWU6IFBhdGguYmFzZW5hbWUodG1wKSxcbiAgICAgICAgcGF0aDogUGF0aC5kaXJuYW1lKHRtcCksXG4gICAgICAgIG1pbWU6ICdpbWFnZS9wbmcnLFxuICAgICAgICBzaXplOiBzdGF0cy5zaXplLFxuICAgIH0pXG4gICAgXG4gICAgcmV0dXJuIHtpbmZvOmluZm8sc3RyZWFtOnJzfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEltYWdlVHlwZUdlbmVyYXJvciAoc3RyZWFtOlJlYWRhYmxlKTogUHJvbWlzZTx7aW5mbzpJRmlsZSwgc3RyZWFtOlJlYWRhYmxlfT4ge1xuICAgIHJldHVybiBhd2FpdCBjcmVhdGVUaHVtbmFpbChzdHJlYW0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gVmlkZW9UeXBlR2VuZXJhcm9yIChzdHJlYW06UmVhZGFibGUpOiBQcm9taXNlPHtpbmZvOklGaWxlLCBzdHJlYW06UmVhZGFibGV9PiB7XG4gICAgcmV0dXJuIG51bGw7ICAgXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQZGZUeXBlR2VuZXJhcm9yIChzdHJlYW06UmVhZGFibGUpOiBQcm9taXNlPHtpbmZvOklGaWxlLCBzdHJlYW06UmVhZGFibGV9PiB7XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
